datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}

// enum PaymentStatus {
//   PAID
//   UNPAID
// }

enum SlotType {
  PRACTICE
  MATCH
  TRAINING
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  CANCELLED
  EXECUTED
}

enum AvailableSports {
  FOOTBALL
}

enum AvailableStates {
  DELHI
  DELHI_NCR
  GURGAON
}

enum SkillLevel {
  BEGINNER
  ACADEMY
  INTERMEDIATE
  SEMI_PRO
  PROFESSIONAL
}

enum PreferredFoot {
  RIGHT
  LEFT
}

enum PreferredPosition {
  GOALKEEPER
  DEFENDER_RIGHT_CENTER_BACK
  DEFENDER_LEFT_CENTER_BACK
  DEFENDER_RIGHT_FULL_BACK
  DEFENDER_LEFT_FULL_BACK
  DEFENSIVE_MIDFIELDER
  RIGHT_ATTACKING_MIDFIELDER
  LEFT_ATTACKING_MIDFIELDER
  STRIKER
  RIGHT_WINGER
  LEFT_WINGER
}

enum VenueAmenities {
  DRINKING_WATER
  WALKING_TRACK
  WASHROOM
  WARM_UP_AREA
  COACHING_AVAILABLE
  PARKING
  BALL_BOY
  ARTIFICIAL_TURF
  LOCKER_ROOM
  CAFE
  SITTING_AREA
  SHOWERS
  SOUND_SYSTEM
  WIFI
  FLOOD_LIGHTS
}

enum TeamStatus {
  PENDING
  WIN
  LOSE
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  name         String
  password     String
  phone        String
  dob          DateTime?
  role         Role
  gender       Gender
  skillsRating Int       @default(0)
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  walletBalance Float @default(0.0) // User's wallet balance

  bookings           Booking[]
  address            Address?            @relation(fields: [addressId], references: [id])
  addressId          String?             @unique @db.Uuid
  sportsProfile      SportsProfile?
  hostProfile        Host?
  teams              Team[]              @relation(name: "TeamUsers")
  walletTransactions WalletTransaction[] // Relation with WalletTransaction
}

model Address {
  id         String          @id @default(uuid()) @db.Uuid
  street     String
  city       String
  state      AvailableStates
  postalCode String
  country    String          @default("INDIA")
  nearby     String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  User       User?
  Venue      Venue?
}

model SportsProfile {
  id                String            @id @default(uuid()) @db.Uuid
  skillLevel        SkillLevel
  preferredPosition PreferredPosition
  strength          String?
  weakness          String?
  preferredFoot     PreferredFoot
  favoriteNumber    Int?
  favoritePlayer    String?
  favoriteClub      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid
}

model Venue {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      String[]
  description String
  locationUrl String
  amenities   VenueAmenities[]

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique @db.Uuid

  sports Sport[]
  slots  Slot[]
}

model Sport {
  id          String          @id @default(uuid()) @db.Uuid
  name        AvailableSports @unique
  rules       String[]
  totalPlayer Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  venues Venue[]
  slots  Slot[]
}

model Slot {
  id              String     @id @default(uuid()) @db.Uuid
  startTime       DateTime
  endTime         DateTime
  maxPlayer       Int
  slotType        SlotType   @default(MATCH)
  status          SlotStatus @default(AVAILABLE)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  price           Float
  discountedPrice Float

  bookings Booking[]
  sport    Sport     @relation(fields: [sportId], references: [id])
  sportId  String    @db.Uuid
  venue    Venue     @relation(fields: [venueId], references: [id])
  venueId  String    @db.Uuid

  team1   Team?   @relation(name: "team1Relation", fields: [team1Id], references: [id])
  team1Id String? @db.Uuid

  team2   Team?   @relation(name: "team2Relation", fields: [team2Id], references: [id])
  team2Id String? @db.Uuid

  host   Host?   @relation(fields: [hostId], references: [id])
  hostId String? @db.Uuid
}

model Booking {
  id              String        @id @default(uuid()) @db.Uuid
  status          BookingStatus
  cancellationFee Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transaction     Transaction?
  slot            Slot          @relation(fields: [slotId], references: [id])
  slotId          String        @db.Uuid
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.Uuid
}

model Transaction {
  id                  String        @id @default(uuid()) @db.Uuid
  booking             Booking       @relation(fields: [bookingId], references: [id])
  bookingId           String        @unique @db.Uuid
  stripeTransactionId String        @unique
  referenceId         String
  amount              Float
  currency            String
  status              PaymentStatus
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Host {
  id         String @id @default(uuid()) @db.Uuid
  occupation String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique @db.Uuid
  slots      Slot[]
}

model Team {
  id     String     @id @default(uuid()) @db.Uuid
  name   String
  color  String // Hex value
  status TeamStatus @default(PENDING)
  users  User[]     @relation(name: "TeamUsers")

  slotsAsTeam1 Slot[] @relation(name: "team1Relation")
  slotsAsTeam2 Slot[] @relation(name: "team2Relation")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WalletTransaction {
  id              String          @id @default(uuid()) @db.Uuid
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @db.Uuid
  transactionId   String          @unique
  referenceId     String?
  amount          Float
  currency        String          @default("INR")
  status          PaymentStatus   @default(PENDING)
  transactionType TransactionType
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
